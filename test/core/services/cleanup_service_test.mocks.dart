// Mocks generated by Mockito 5.4.6 from annotations
// in aegis_docs/test/core/services/cleanup_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:aegis_docs/core/services/native_cleanup_service.dart' as _i2;
import 'package:aegis_docs/core/services/settings_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NativeCleanupService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNativeCleanupService extends _i1.Mock
    implements _i2.NativeCleanupService {
  MockNativeCleanupService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> cleanupExportedFiles({required int? expirationInMinutes}) =>
      (super.noSuchMethod(
            Invocation.method(#cleanupExportedFiles, [], {
              #expirationInMinutes: expirationInMinutes,
            }),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i4.SettingsService {
  MockSettingsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveCleanupDuration(_i4.CleanupDuration? duration) =>
      (super.noSuchMethod(
            Invocation.method(#saveCleanupDuration, [duration]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i4.CleanupDuration> loadCleanupDuration() =>
      (super.noSuchMethod(
            Invocation.method(#loadCleanupDuration, []),
            returnValue: _i3.Future<_i4.CleanupDuration>.value(
              _i4.CleanupDuration.fiveMinutes,
            ),
          )
          as _i3.Future<_i4.CleanupDuration>);

  @override
  int getDurationInMinutes(_i4.CleanupDuration? cleanup) =>
      (super.noSuchMethod(
            Invocation.method(#getDurationInMinutes, [cleanup]),
            returnValue: 0,
          )
          as int);
}
