import 'dart:typed_data';

import 'package:aegis_docs/core/media_processing/pdf_processor.dart';
import 'package:flutter_test/flutter_test.dart';

// --- Helper Data --- //

// A minimal, valid 1x1 transparent PNG for testing image-to-PDF conversion.
final Uint8List fakePngBytes = Uint8List.fromList([
  0x89,
  0x50,
  0x4E,
  0x47,
  0x0D,
  0x0A,
  0x1A,
  0x0A,
  0x00,
  0x00,
  0x00,
  0x0D,
  0x49,
  0x48,
  0x44,
  0x52,
  0x00,
  0x00,
  0x00,
  0x01,
  0x00,
  0x00,
  0x00,
  0x01,
  0x08,
  0x06,
  0x00,
  0x00,
  0x00,
  0x1F,
  0x15,
  0xC4,
  0x89,
  0x00,
  0x00,
  0x00,
  0x0A,
  0x49,
  0x44,
  0x41,
  0x54,
  0x78,
  0x9C,
  0x63,
  0x00,
  0x01,
  0x00,
  0x00,
  0x05,
  0x00,
  0x01,
  0x0D,
  0x0A,
  0x2D,
  0xB4,
  0x00,
  0x00,
  0x00,
  0x00,
  0x49,
  0x45,
  0x4E,
  0x44,
  0xAE,
  0x42,
  0x60,
  0x82,
]);

// A minimal, valid single-page PDF for testing.
final Uint8List fakePdfBytes = Uint8List.fromList([
  37,
  80,
  68,
  70,
  45,
  49,
  46,
  55,
  10,
  37,
  226,
  227,
  207,
  211,
  10,
  49,
  32,
  48,
  32,
  111,
  98,
  106,
  10,
  60,
  60,
  47,
  84,
  121,
  112,
  101,
  47,
  67,
  97,
  116,
  97,
  108,
  111,
  103,
  47,
  80,
  97,
  103,
  101,
  115,
  32,
  50,
  32,
  48,
  32,
  82,
  62,
  62,
  10,
  101,
  110,
  100,
  111,
  98,
  106,
  10,
  50,
  32,
  48,
  32,
  111,
  98,
  106,
  10,
  60,
  60,
  47,
  84,
  121,
  112,
  101,
  47,
  80,
  97,
  103,
  101,
  115,
  47,
  75,
  105,
  100,
  115,
  91,
  51,
  32,
  48,
  32,
  82,
  93,
  47,
  67,
  111,
  117,
  110,
  116,
  32,
  49,
  62,
  62,
  10,
  101,
  110,
  100,
  111,
  98,
  106,
  10,
  51,
  32,
  48,
  32,
  111,
  98,
  106,
  10,
  60,
  60,
  47,
  84,
  121,
  112,
  101,
  47,
  80,
  97,
  103,
  101,
  47,
  80,
  97,
  114,
  101,
  110,
  116,
  32,
  50,
  32,
  48,
  32,
  82,
  47,
  82,
  101,
  115,
  111,
  117,
  114,
  99,
  101,
  115,
  60,
  60,
  47,
  70,
  111,
  110,
  116,
  60,
  60,
  47,
  70,
  49,
  32,
  52,
  32,
  48,
  32,
  82,
  62,
  62,
  62,
  62,
  47,
  77,
  101,
  100,
  105,
  97,
  66,
  111,
  120,
  91,
  48,
  32,
  48,
  32,
  51,
  32,
  51,
  93,
  47,
  67,
  111,
  110,
  116,
  101,
  110,
  116,
  115,
  32,
  53,
  32,
  48,
  32,
  82,
  62,
  62,
  10,
  101,
  110,
  100,
  111,
  98,
  106,
  10,
  52,
  32,
  48,
  32,
  111,
  98,
  106,
  10,
  60,
  60,
  47,
  84,
  121,
  112,
  101,
  47,
  70,
  111,
  110,
  116,
  47,
  83,
  117,
  98,
  116,
  121,
  112,
  101,
  47,
  84,
  121,
  112,
  101,
  49,
  47,
  66,
  97,
  115,
  101,
  70,
  111,
  110,
  116,
  47,
  84,
  105,
  109,
  101,
  115,
  45,
  82,
  111,
  109,
  97,
  110,
  62,
  62,
  10,
  101,
  110,
  100,
  111,
  98,
  106,
  10,
  53,
  32,
  48,
  32,
  111,
  98,
  106,
  10,
  60,
  60,
  47,
  76,
  101,
  110,
  103,
  116,
  104,
  32,
  52,
  52,
  62,
  62,
  10,
  115,
  116,
  114,
  101,
  97,
  109,
  10,
  66,
  84,
  10,
  47,
  70,
  49,
  32,
  49,
  32,
  84,
  102,
  10,
  48,
  32,
  48,
  32,
  84,
  100,
  10,
  40,
  72,
  101,
  108,
  108,
  111,
  41,
  32,
  84,
  106,
  10,
  69,
  84,
  10,
  101,
  110,
  100,
  115,
  116,
  114,
  101,
  97,
  109,
  10,
  101,
  110,
  100,
  111,
  98,
  106,
  10,
  120,
  114,
  101,
  102,
  10,
  48,
  32,
  54,
  10,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  32,
  54,
  53,
  53,
  51,
  53,
  32,
  102,
  32,
  10,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  49,
  53,
  32,
  48,
  48,
  48,
  48,
  48,
  32,
  110,
  32,
  10,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  55,
  52,
  32,
  48,
  48,
  48,
  48,
  48,
  32,
  110,
  32,
  10,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  49,
  52,
  55,
  32,
  48,
  48,
  48,
  48,
  48,
  32,
  110,
  32,
  10,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  50,
  56,
  50,
  32,
  48,
  48,
  48,
  48,
  48,
  32,
  110,
  32,
  10,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  51,
  56,
  51,
  32,
  48,
  48,
  48,
  48,
  48,
  32,
  110,
  32,
  10,
  116,
  114,
  97,
  105,
  108,
  101,
  114,
  10,
  60,
  60,
  47,
  83,
  105,
  122,
  101,
  32,
  54,
  47,
  82,
  111,
  111,
  116,
  32,
  49,
  32,
  48,
  32,
  82,
  62,
  62,
  10,
  115,
  116,
  97,
  114,
  116,
  120,
  114,
  101,
  102,
  10,
  52,
  56,
  53,
  10,
  37,
  37,
  69,
  79,
  70,
]);

void main() {
  late PdfProcessor pdfProcessor;

  setUp(() {
    pdfProcessor = PdfProcessor();
    // We must initialize the binding for the test environment.
    TestWidgetsFlutterBinding.ensureInitialized();
  });

  group('PdfProcessor', () {
    test('convertImageToPdf should produce a valid PDF', () async {
      // Act
      final result = await pdfProcessor.convertImageToPdf(
        imageBytes: fakePngBytes,
      );
      // Assert
      expect(result, isA<Uint8List>());
      expect(result, isNotEmpty);
      // A simple check to see if it starts with the PDF header.
      expect(result.sublist(0, 4), equals([37, 80, 68, 70]));
    });

    test('isPdfEncrypted should return false for an unencrypted PDF', () async {
      // Act
      final result = await pdfProcessor.isPdfEncrypted(pdfBytes: fakePdfBytes);
      // Assert
      expect(result, isFalse);
    });

    // NOTE: The `convertPdfToImages` method is not tested here because it uses
    // `Isolate.spawn` and the `pdfrx` platform channel. This functionality
    // cannot be executed in a pure Dart unit test environment and would require
    // a more complex integration test.
  });
}
