// Mocks generated by Mockito 5.4.6 from annotations
// in aegis_docs/test/data/repositories/document_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i2;
import 'dart:typed_data' as _i8;

import 'package:aegis_docs/core/media_processing/file_picker_service.dart'
    as _i4;
import 'package:aegis_docs/core/media_processing/image_processor.dart' as _i7;
import 'package:aegis_docs/core/media_processing/pdf_processor.dart' as _i10;
import 'package:aegis_docs/core/services/cloud_storage_service.dart' as _i11;
import 'package:aegis_docs/core/services/encryption_service.dart' as _i13;
import 'package:aegis_docs/core/services/file_storage_service.dart' as _i14;
import 'package:aegis_docs/core/services/native_pdf_compression_service.dart'
    as _i3;
import 'package:aegis_docs/data/models/picked_file_model.dart' as _i6;
import 'package:aegis_docs/data/repositories/document_repository.dart' as _i15;
import 'package:flutter/material.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDirectory_0 extends _i1.SmartFake implements _i2.Directory {
  _FakeDirectory_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNativeCompressionResult_1 extends _i1.SmartFake
    implements _i3.NativeCompressionResult {
  _FakeNativeCompressionResult_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFile_2 extends _i1.SmartFake implements _i2.File {
  _FakeFile_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FilePickerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilePickerService extends _i1.Mock implements _i4.FilePickerService {
  MockFilePickerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<(_i6.PickedFileModel?, bool)> pickImage() =>
      (super.noSuchMethod(
            Invocation.method(#pickImage, []),
            returnValue: _i5.Future<(_i6.PickedFileModel?, bool)>.value((
              null,
              false,
            )),
          )
          as _i5.Future<(_i6.PickedFileModel?, bool)>);

  @override
  _i5.Future<List<(_i6.PickedFileModel?, bool)>> pickMultipleImages() =>
      (super.noSuchMethod(
            Invocation.method(#pickMultipleImages, []),
            returnValue: _i5.Future<List<(_i6.PickedFileModel?, bool)>>.value(
              <(_i6.PickedFileModel?, bool)>[],
            ),
          )
          as _i5.Future<List<(_i6.PickedFileModel?, bool)>>);

  @override
  _i5.Future<_i6.PickedFileModel?> pickPdf() =>
      (super.noSuchMethod(
            Invocation.method(#pickPdf, []),
            returnValue: _i5.Future<_i6.PickedFileModel?>.value(),
          )
          as _i5.Future<_i6.PickedFileModel?>);

  @override
  _i5.Future<List<_i6.PickedFileModel>> pickAndSanitizeMultipleImagesForPdf() =>
      (super.noSuchMethod(
            Invocation.method(#pickAndSanitizeMultipleImagesForPdf, []),
            returnValue: _i5.Future<List<_i6.PickedFileModel>>.value(
              <_i6.PickedFileModel>[],
            ),
          )
          as _i5.Future<List<_i6.PickedFileModel>>);
}

/// A class which mocks [ImageProcessor].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageProcessor extends _i1.Mock implements _i7.ImageProcessor {
  MockImageProcessor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i8.Uint8List> resize({
    required _i8.Uint8List? imageBytes,
    required int? width,
    required int? height,
    required String? outputFormat,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#resize, [], {
              #imageBytes: imageBytes,
              #width: width,
              #height: height,
              #outputFormat: outputFormat,
            }),
            returnValue: _i5.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
          )
          as _i5.Future<_i8.Uint8List>);

  @override
  _i5.Future<_i8.Uint8List> compressImage({
    required _i8.Uint8List? imageBytes,
    int? quality = 100,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#compressImage, [], {
              #imageBytes: imageBytes,
              #quality: quality,
            }),
            returnValue: _i5.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
          )
          as _i5.Future<_i8.Uint8List>);

  @override
  _i5.Future<_i8.Uint8List> changeFormat({
    required _i8.Uint8List? imageBytes,
    required String? originalFormat,
    required String? targetFormat,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#changeFormat, [], {
              #imageBytes: imageBytes,
              #originalFormat: originalFormat,
              #targetFormat: targetFormat,
            }),
            returnValue: _i5.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
          )
          as _i5.Future<_i8.Uint8List>);

  @override
  _i5.Future<_i8.Uint8List?> crop({
    required _i8.Uint8List? imageBytes,
    required _i9.ThemeData? theme,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#crop, [], {
              #imageBytes: imageBytes,
              #theme: theme,
            }),
            returnValue: _i5.Future<_i8.Uint8List?>.value(),
          )
          as _i5.Future<_i8.Uint8List?>);

  @override
  _i5.Future<_i8.Uint8List> applyGrayscale({
    required _i8.Uint8List? imageBytes,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#applyGrayscale, [], {#imageBytes: imageBytes}),
            returnValue: _i5.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
          )
          as _i5.Future<_i8.Uint8List>);
}

/// A class which mocks [PdfProcessor].
///
/// See the documentation for Mockito's code generation for more information.
class MockPdfProcessor extends _i1.Mock implements _i10.PdfProcessor {
  MockPdfProcessor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i8.Uint8List>> convertPdfToImages({
    required _i8.Uint8List? pdfBytes,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#convertPdfToImages, [], {#pdfBytes: pdfBytes}),
            returnValue: _i5.Future<List<_i8.Uint8List>>.value(
              <_i8.Uint8List>[],
            ),
          )
          as _i5.Future<List<_i8.Uint8List>>);

  @override
  _i5.Future<_i8.Uint8List> convertImageToPdf({
    required _i8.Uint8List? imageBytes,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#convertImageToPdf, [], {
              #imageBytes: imageBytes,
            }),
            returnValue: _i5.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
          )
          as _i5.Future<_i8.Uint8List>);

  @override
  _i5.Future<_i8.Uint8List> convertImagesToPdf({
    required List<_i8.Uint8List>? imageBytesList,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#convertImagesToPdf, [], {
              #imageBytesList: imageBytesList,
            }),
            returnValue: _i5.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
          )
          as _i5.Future<_i8.Uint8List>);

  @override
  _i5.Future<bool> isPdfEncrypted({required _i8.Uint8List? pdfBytes}) =>
      (super.noSuchMethod(
            Invocation.method(#isPdfEncrypted, [], {#pdfBytes: pdfBytes}),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<_i8.Uint8List> lockPdf({
    required _i8.Uint8List? pdfBytes,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#lockPdf, [], {
              #pdfBytes: pdfBytes,
              #password: password,
            }),
            returnValue: _i5.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
          )
          as _i5.Future<_i8.Uint8List>);

  @override
  _i5.Future<_i8.Uint8List> unlockPdf({
    required _i8.Uint8List? pdfBytes,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#unlockPdf, [], {
              #pdfBytes: pdfBytes,
              #password: password,
            }),
            returnValue: _i5.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
          )
          as _i5.Future<_i8.Uint8List>);

  @override
  _i5.Future<_i8.Uint8List> changePdfPassword({
    required _i8.Uint8List? pdfBytes,
    required String? oldPassword,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#changePdfPassword, [], {
              #pdfBytes: pdfBytes,
              #oldPassword: oldPassword,
              #newPassword: newPassword,
            }),
            returnValue: _i5.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
          )
          as _i5.Future<_i8.Uint8List>);
}

/// A class which mocks [CloudStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCloudStorageService extends _i1.Mock
    implements _i11.CloudStorageService {
  MockCloudStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get serverClientId =>
      (super.noSuchMethod(
            Invocation.getter(#serverClientId),
            returnValue: _i12.dummyValue<String>(
              this,
              Invocation.getter(#serverClientId),
            ),
          )
          as String);

  @override
  _i5.Future<bool?> deleteBackup(String? fileName) =>
      (super.noSuchMethod(
            Invocation.method(#deleteBackup, [fileName]),
            returnValue: _i5.Future<bool?>.value(),
          )
          as _i5.Future<bool?>);

  @override
  _i5.Future<void> uploadBackup(_i2.File? backupFile, String? fileName) =>
      (super.noSuchMethod(
            Invocation.method(#uploadBackup, [backupFile, fileName]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.File?> downloadBackup(String? fileName) =>
      (super.noSuchMethod(
            Invocation.method(#downloadBackup, [fileName]),
            returnValue: _i5.Future<_i2.File?>.value(),
          )
          as _i5.Future<_i2.File?>);
}

/// A class which mocks [EncryptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEncryptionService extends _i1.Mock implements _i13.EncryptionService {
  MockEncryptionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<Map<String, String>> getEncryptedDataKeyForBackup(
    String? masterPassword,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getEncryptedDataKeyForBackup, [masterPassword]),
            returnValue: _i5.Future<Map<String, String>>.value(
              <String, String>{},
            ),
          )
          as _i5.Future<Map<String, String>>);

  @override
  _i5.Future<void> restoreDataKeyFromBackup(
    String? masterPassword,
    Map<String, dynamic>? backupData,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#restoreDataKeyFromBackup, [
              masterPassword,
              backupData,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i8.Uint8List> encrypt(_i8.Uint8List? data) =>
      (super.noSuchMethod(
            Invocation.method(#encrypt, [data]),
            returnValue: _i5.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
          )
          as _i5.Future<_i8.Uint8List>);

  @override
  _i5.Future<_i8.Uint8List> decrypt(_i8.Uint8List? combinedData) =>
      (super.noSuchMethod(
            Invocation.method(#decrypt, [combinedData]),
            returnValue: _i5.Future<_i8.Uint8List>.value(_i8.Uint8List(0)),
          )
          as _i5.Future<_i8.Uint8List>);
}

/// A class which mocks [FileStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileStorageService extends _i1.Mock
    implements _i14.FileStorageService {
  MockFileStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Directory> getBaseWalletDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getBaseWalletDirectory, []),
            returnValue: _i5.Future<_i2.Directory>.value(
              _FakeDirectory_0(
                this,
                Invocation.method(#getBaseWalletDirectory, []),
              ),
            ),
          )
          as _i5.Future<_i2.Directory>);

  @override
  _i5.Future<String> saveToPrivateDirectory({
    required String? fileName,
    required _i8.Uint8List? data,
    String? folderPath,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#saveToPrivateDirectory, [], {
              #fileName: fileName,
              #data: data,
              #folderPath: folderPath,
            }),
            returnValue: _i5.Future<String>.value(
              _i12.dummyValue<String>(
                this,
                Invocation.method(#saveToPrivateDirectory, [], {
                  #fileName: fileName,
                  #data: data,
                  #folderPath: folderPath,
                }),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<_i8.Uint8List?> loadFromPrivateDirectory({
    required String? fileName,
    String? folderPath,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#loadFromPrivateDirectory, [], {
              #fileName: fileName,
              #folderPath: folderPath,
            }),
            returnValue: _i5.Future<_i8.Uint8List?>.value(),
          )
          as _i5.Future<_i8.Uint8List?>);

  @override
  _i5.Future<void> deleteFromPrivateDirectory({
    required String? fileName,
    String? folderPath,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFromPrivateDirectory, [], {
              #fileName: fileName,
              #folderPath: folderPath,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.FileSystemEntity>> listDirectoryContents({
    String? folderPath,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#listDirectoryContents, [], {
              #folderPath: folderPath,
            }),
            returnValue: _i5.Future<List<_i2.FileSystemEntity>>.value(
              <_i2.FileSystemEntity>[],
            ),
          )
          as _i5.Future<List<_i2.FileSystemEntity>>);

  @override
  _i5.Future<void> renameFile({
    required String? oldName,
    required String? newName,
    String? folderPath,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#renameFile, [], {
              #oldName: oldName,
              #newName: newName,
              #folderPath: folderPath,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> createFolder({
    required String? folderName,
    String? parentFolderPath,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createFolder, [], {
              #folderName: folderName,
              #parentFolderPath: parentFolderPath,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteFolder({required String? folderPath}) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFolder, [], {#folderPath: folderPath}),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String?> saveFile(_i8.Uint8List? bytes, String? fileName) =>
      (super.noSuchMethod(
            Invocation.method(#saveFile, [bytes, fileName]),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<List<String>> listAllFoldersRecursively() =>
      (super.noSuchMethod(
            Invocation.method(#listAllFoldersRecursively, []),
            returnValue: _i5.Future<List<String>>.value(<String>[]),
          )
          as _i5.Future<List<String>>);

  @override
  _i5.Future<List<_i2.File>> listPrivateFiles() =>
      (super.noSuchMethod(
            Invocation.method(#listPrivateFiles, []),
            returnValue: _i5.Future<List<_i2.File>>.value(<_i2.File>[]),
          )
          as _i5.Future<List<_i2.File>>);

  @override
  _i5.Future<String?> saveToPublicDirectory({
    required String? fileName,
    required _i8.Uint8List? data,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#saveToPublicDirectory, [], {
              #fileName: fileName,
              #data: data,
            }),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<String> saveToPublicDownloads({
    required String? fileName,
    required _i8.Uint8List? data,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#saveToPublicDownloads, [], {
              #fileName: fileName,
              #data: data,
            }),
            returnValue: _i5.Future<String>.value(
              _i12.dummyValue<String>(
                this,
                Invocation.method(#saveToPublicDownloads, [], {
                  #fileName: fileName,
                  #data: data,
                }),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<void> renameFolder({
    required String? oldPath,
    required String? newName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#renameFolder, [], {
              #oldPath: oldPath,
              #newName: newName,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i2.Directory?> getPublicExportDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getPublicExportDirectory, []),
            returnValue: _i5.Future<_i2.Directory?>.value(),
          )
          as _i5.Future<_i2.Directory?>);
}

/// A class which mocks [NativePdfCompressionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNativePdfCompressionService extends _i1.Mock
    implements _i3.NativePdfCompressionService {
  MockNativePdfCompressionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.NativeCompressionResult> compressPdf({
    required String? filePath,
    required int? sizeLimit,
    required bool? preserveText,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#compressPdf, [], {
              #filePath: filePath,
              #sizeLimit: sizeLimit,
              #preserveText: preserveText,
            }),
            returnValue: _i5.Future<_i3.NativeCompressionResult>.value(
              _FakeNativeCompressionResult_1(
                this,
                Invocation.method(#compressPdf, [], {
                  #filePath: filePath,
                  #sizeLimit: sizeLimit,
                  #preserveText: preserveText,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.NativeCompressionResult>);
}

/// A class which mocks [BackupZipper].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackupZipper extends _i1.Mock implements _i15.BackupZipper {
  MockBackupZipper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.File> create(String? walletPath, String? keyJson) =>
      (super.noSuchMethod(
            Invocation.method(#create, [walletPath, keyJson]),
            returnValue: _i5.Future<_i2.File>.value(
              _FakeFile_2(
                this,
                Invocation.method(#create, [walletPath, keyJson]),
              ),
            ),
          )
          as _i5.Future<_i2.File>);
}
